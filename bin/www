#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('soc:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '80');
var port = 80;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Load socket.io
 */

//var io = require('socket.io').listen(server);
var io = require('socket.io')(server);
var passportSocketIo = require('passport.socketio');
var session = require('express-session');
var MongoStore = require('connect-mongo')(session);
var mongoose = require('mongoose');

io.of('/monitor').use(function(socket, next) {
/*
  var handshakeData = socket.request;

  console.log('handshakeData >>>');
  console.log(handshakeData.user);
console.log('<<< handshakeData');
*/


  // make sure the handshake data looks good as before
  // if error do this:
    // next(new Error('not authorized');
  // else just call next
  next();
});

io.use(passportSocketIo.authorize({
  key: 'connect.sid',
  secret: 'e!b(£6^§§914C9£5*01A$_b^284a*096(!6f0*1f!&849*3).',
  store: new MongoStore({
    mongooseConnection: mongoose.connection
  }),
  success: function (data, accept) {
    // console.log('successful connection to socket.io');
    accept();
  },  // *optional* callback on success - read more below
  fail: function (data, message, error, accept) {
    // console.log('Not authenticated in socket');
    accept();
  }
}));



/**
 * Load squares socket.io app
 */

var activityMonitorIo = require('../sockets/activity-monitor.js')(io);
var chatIo = require('../sockets/chat.js')(io);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
/*
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
*/
/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
